<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Zend Framework 2 Development Blog</title>
    <description>Zend Framework 2 Development Blog</description>
    <pubDate>Tue, 20 Dec 2011 16:04:05 -0600</pubDate>
    <generator>Zend_Feed_Writer 1.11.0dev (http://framework.zend.com)</generator>
    <link>http://framework.zend.com/zf2/blog</link>
    <author>zf-contributors@lists.zend.com (Zend Framework Development Team)</author>
    <dc:creator>Zend Framework Development Team</dc:creator>
    <atom:link rel="self" type="application/rss+xml" href="http://framework.zend.com/zf2/blog/feed"/>
    <item>
      <title>Zend Framework 2.0.0beta2 Released!</title>
      <description><![CDATA[<p>
The Zend Framework community is pleased to announce the immediate availability
of Zend Framework 2.0.0beta2. Packages and installation instructions are
available at:
</p>

<dl>
    <dd>
    <a href="http://packages.zendframework.com/">http://packages.zendframework.com/</a>
    </dd>
</dl>

<p>
This is the second in a series of planned beta releases. The beta release
cycle is following the "gmail" style of betas, whereby new features will
be added in each new release, and BC will not be guaranteed; beta
releases will happen <em>approximately</em> every six weeks. The desire is for
developers to adopt and work with new components as they are shipped, and
provide feedback so we can polish the distribution.
</p>

<p>
Once all code in the proposed <a href="http://framework.zend.com/wiki/pages/viewpage.action?pageId=43745438">standard distribution</a> 
has reached maturity and reasonable stability, we will freeze the API and
prepare for Release Candidate status. 
</p>


<p>
Featured components and functionality of 2.0.0beta2 include:
</p>

<ul class="ul">
    <li><b>Refactored Mail component</b>
    <ul class="ul">
        <li>The Storage API has been left intact, though several classes and interfaces were shuffled around.</li>
        <li>Zend\Mail\Mail was renamed to Zend\Mail\Message; it now 
            encapsulates a mail message and all headers.  MIME messages are 
            created by attaching a Zend\Mime\Message object as the mail message 
            body</li>
        <li>Added Zend\Mail\Address and Zend\Mail\AddressList, used to 
            represent single addresses and address collections, particularly 
            within mail headers
            </li>
        <li>Added Zend\Mail\Header\* and Zend\Mail\Headers, representations of 
            mail headers.</li>
        <li>A new Zend\Mail\Transport interface defines simply 
            <code>send(Message $message)</code>.  The SMTP, File, and Sendmail 
            transports were rewritten to consume Message objects, and to introduce 
            Options classes.</li>
    </ul>
    </li>
    <li><b>Refactored Cache component</b>
    <ul class="ul">
        <li>Completely rewritten component.</li>
        <li>New API features storage adapters and adapter plugins for 
            implementing cache storage and features such as serialization, 
            clearing, and optimizing.</li>
        <li>Current adapters include filesystem, APC, memcached, and memory.</li>
        <li>All adapters can describe capabilities.</li>
        <li>Plugins are implemented as event listeners.</li>
        <li>A new "Pattern" API was created to simplify things like method, 
            class, object, and output caching.</li>
    </ul>
    </li>
    <li><b>MVC updates</b>
    <ul class="ul">
        <li>Zend\Module\Manager was stripped of most functionality; it now 
            simply iterates requested modules and triggers events.</li>
        <li>Former manager functionality such as class loading and 
            instantiation, <code>init()</code> triggering, configuration gathering, 
            and autoloader seeding were moved to event listeners.</li>
        <li>Post-module loading configuration globbing support was added, 
            simplifying the story of overriding module configuration.</li>
        <li>The recommended filesystem no longer uses plurals for directory 
            names.</li>
        <li>The recommendations now include a <code>chdir(__DIR__ . 
            '/../')</code> from the "public/index.php" file, and specifying 
            configuration paths to be relative to application directory.</li>
    </ul>
    </li>
</ul>

<p>
    In addition, over 100 bug and feature requests were handled since 2.0.0beta1.
</p>


<p>
    The <a href="http://github.com/zendframework/ZendSkeletonApplication">skeleton
    application</a> and a <a
    href="http://github.com/zendframework/ZendSkeletonModule">skeleton
    module</a> built for 2.0.0beta1 have been updated for 2.0.0beta2, and are a 
    great place to look to help get you started. You may also want to check out the <a
    href="http://packages.zendframework.com/docs/latest/manual/en/zend.mvc.quick-start.html">quick start
    guide to the MVC</a>.
powerful. 
</p>

<p>
As a reminder, all ZF2 components are also available individually as <a href="http://pear2.php.net">Pyrus</a> 
packages; packages.zendframework.com is our official channel.
</p>

<p>
I'd like to thank each and every person who has contributed ideas, feedback, 
pull requests (no pull request is too small!), testing, and more -- we have a 
solid chunk of quality new functionality to test now thanks to your efforts!
</p>]]></description>
      <pubDate>Tue, 20 Dec 2011 16:30:00 -0600</pubDate>
      <link>http://framework.zend.com/zf2/blog/entry/Zend-Framework-2-0-0beta2-Released</link>
      <guid>http://framework.zend.com/zf2/blog/entry/Zend-Framework-2-0-0beta2-Released</guid>
      <author>Matthew Weier O'Phinney</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
The Zend Framework community is pleased to announce the immediate availability
of Zend Framework 2.0.0beta2. Packages and installation instructions are
available at:
</p>

<dl>
    <dd>
    <a href="http://packages.zendframework.com/">http://packages.zendframework.com/</a>
    </dd>
</dl>]]></content:encoded>
    </item>
    <item>
      <title>2011-11-21 Dev status update</title>
      <description><![CDATA[<h2 id="toc_3.1">Repository Changes!</h2>

<p>
We've now moved our canonical repository to GitHub, which is where most folks
were forking and doing development anyways. The reasons were several:
</p>

<ul class="ul">
<li>
The main reason for self-hosting was to make checking CLA status simpler. As
   ZF2 development no longer requires a CLA, this reason is gone.
</li>
<li>
ACLs for providing commit access are easier to manage on GitHub, and do not
   require us to first receive SSH keys from contributors.
</li>
<li>
Using GitHub directly simplifies the pull request process. When
   self-hosting, we would merge and push to the canonical repo, and then need to
   manually close the pull request; using GitHub, PRs are automatically closed
   when the code is merged. Additionally, because the mirroring only occurred a
   few times per day, it was not immediately evident on GitHub when a change
   was available to test.
</li>
<li>
There was often confusion by developers on where the most current changes
   were, particularly if they forked from the GitHub repository.
</li>
</ul>

<p>
The practical upshot is that if you had git.zendframework.com as a remote on
your repository, you should remove it. If you didn't have a
github.com/zendframework/zf2 remote, you should add one. The
<a href="http://bit.ly/zf2gitguide">ZF2 Git Guide</a> details adding the remote.
</p>

<h2 id="toc_3.2">MVC Developments</h2>

<p>
Two big things occurred in the MVC this week.
</p>

<p>
First, we did some re-thinking of the duties of the Module Manager. Previously,
it was responsible for merging configuration and firing module initialization.
A recommended part of module initialization was to initialize autoloading.
</p>

<p>
What we noticed was:
</p>

<ul class="ul">
<li>
Configuration merging was getting more complex, and we were getting
   potentially incompatible feature requests.
</li>
<li>
Our modules were getting hard dependencies on things like autoloaders, and
   were also introducing a lot of boiler-plate code.
</li>
<li>
We had no clear path to how we might cache autoloading configuration for
   production.
</li>
<li>
We were noticing more and more places where we might want to loop through the
   loaded modules in order to trigger methods of interest.
</li>
</ul>

<p>
So, the solution was to change things: <code>Zend\Module\Manager::loadModule()</code> now
triggers a "loadModule" event, passing it the newly created module. This allows
listeners to react to modules real-time as they're loaded. 
</p>

<p>
This also meant that the code for the following actions could be moved to
listeners:
</p>

<ul class="ul">
<li>Autoloading</li>
<li>Configuration loading</li>
<li>Module "initialization"</li>
</ul>

<p>
This allows modules that look like this:
</p>

<pre class="highlight">
namespace Blog;

use InvalidArgumentException,
    Zend\EventManager\StaticEventManager,
    Zend\Module\Consumer\AutoloaderProvider;

class Module implements AutoloaderProvider
{
    public function init()
    {
        $events = StaticEventManager::getInstance();
        $events->attach('bootstrap', 'bootstrap', array($this, 'bootstrap'));
    }

    public function getAutoloaderConfig()
    {
        return array(
            'Zend\Loader\ClassMapAutoloader' => array(
                __DIR__ . '/autoload_classmap.php'
            ),
        );
    }

    public function getConfig()
    {
        return include __DIR__ . '/configs/module.config.php';
    }
    
    /* ... */
}
</pre>

<p>
This looks about the same as before! The differences are:
</p>

<ul class="ul">
<li><code>getAutoloaderConfig()</code> can simply return an array of options to pass to
   <code>Zend\Loader\AutoloaderFactory</code>. This allows us to obtain a fully configured
   autoloader at the end -- which we will eventually be able to cache, and thus
   eliminate the need for the autoloader listener.
</li>
<li><code>getConfig()</code> is no longer called directly by the module manager, but instead
   by a listener. Again, this will make it possible to cache the full
   application configuration.
</li>
<li><code>init()</code> is called by a listener now. </li>
</ul>

<p>
In other words, the differences are largely under the hood. But those
differences mean that it's trivially easy to develop your own listeners to tie
into the module loading process in order to do interesting things -- all without
needing to touch or extend the main module manager.
</p>

<h2 id="toc_3.3">Application Configuration</h2>

<p>
Several people indicated that much as they like module configuration merging,
they weren't liking the solutions for overriding configuration at the
application level. The solutions to date have been:
</p>

<ul class="ul">
<li>Register the module with overrides last -- for instance, your Application module.</li>
<li>Create a configuration-only module that registers last.</li>
</ul>

<p>
The consensus was that a module for simply providing configuration overrides
"sucks", and that using the "Application" module sometimes was problematic
(especially for purposes of registering view script paths).
</p>

<p>
The solution was to add some logic to provide application-level configuration.
This was added to the configuration listener, and allows for you to specify a
directory with configuration (ala "conf.d" style configuration now commonly used
across a number of *nix distributions); this configuration is then merged after
module configuration is aggregated. Your <code>index.php</code> would then contain
something like the following:
</p>

<pre class="highlight">
$moduleManager = new Zend\Module\Manager($appConfig['modules']);
$listenerOptions = new Zend\Module\Listener\ListenerOptions($appConfig['module_listener_options']);
$moduleManager->setDefaultListenerOptions($listenerOptions);
$moduleManager->getConfigListener()->addConfigGlobPath(dirname(__DIR__) . '/config/autoload/*.config.php');
$moduleManager->loadModules();
</pre>

<p>
Hopefully, these changes will simplify how app-specific configuration is
managed.
</p>

<h2 id="toc_3.4">Beta2 is coming!</h2>

<p>
Beta2 is coming up soon! We're hoping to have it ready by the end of the month.
The components currently under development for beta2 include:
</p>

<ul class="ul">
    <li>Zend\Log</li>
    <li>Zend\Cache</li>
    <li>Zend\Mail</li>
</ul>

<p>
Cache is mostly complete and needs some review and input regarding its usage of
the EventManager. Log and Mail are currently under development. We encourage
you to reach out on the #zftalk.2 IRC channel on Freenode or the zf-contributors
mailing list if you would like to assist with testing or development of these
components.
</p>

<h2 id="toc_3.5">IRC meeting this week</h2>

<p>
We have another <a 
href="http://framework.zend.com/wiki/display/ZFDEV2/2011-11-23+Meeting+Agenda">IRC 
meeting this week</a>. Follow the link to see the agenda -- and add to it if 
you want to discuss additional topics. 
</p>
]]></description>
      <pubDate>Mon, 21 Nov 2011 14:35:00 -0600</pubDate>
      <link>http://framework.zend.com/zf2/blog/entry/2011-11-21-Dev-status-update</link>
      <guid>http://framework.zend.com/zf2/blog/entry/2011-11-21-Dev-status-update</guid>
      <author>Matthew Weier O'Phinney</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    What's going on in ZF2 development this week?
</p>

<p>
A few things!
</p>]]></content:encoded>
    </item>
    <item>
      <title>2011-11-11 Dev status update</title>
      <description><![CDATA[<p>
We've been busy since the last update!
</p>

<p>
The last update was during the busy-ness of <a href="http://zendcon.com/">ZendCon</a>, where we <a href="http://framework.zend.com/zf2/blog/entry/Zend-Framework-2-0-0beta1-Released">announced the first beta release</a> of ZF2. The release was met with a lot of enthusiasm, and we've seen increased usage and testing of ZF2 in the weeks following.
</p>

<p>
Since then, let's recap what's been going on in ZF2 development.
</p>

<h2 id="toc_4.1">IRC Meetings</h2>

<h3 id="toc_4.1.1">26 October 2011 IRC Meeting</h3>

<p>
We held an IRC meeting the Wednesday immediately following ZendCon. During the
meeting, we discussed three items: a nascent ACL/RBAC RFC, differences between
RFCs and proposals, and module distribution and installation.
</p>

<p>
The conclusions were:
</p>

<ul class="ul">
<li>
Not enough details as to whether we need to refactor ACL, other than to take
   advantage of some SPL interfaces and classes. Somebody needs to spearhead
   this. Additionally, if those changes are made, the few calls for an RBAC
   component may be moot.
</li>
<li>
RFCs are for architectural changes or to discuss refactors/rewrites of
   <em>existing</em> components; proposals are for <em>new</em> components. Consensus is that
   we need more action and visibility from the CR-Team, and those on the team
   that were present took notes and followed up with a meeting.
</li>
<li>
Basically, the Modules distribution/instalation RFC is on hold until some
   other intitiatives (such as the CLI RFC) are finalized.
</li>
</ul>

<p>
<a href="http://framework.zend.com/wiki/display/ZFDEV2/2011-10-26+Meeting+Log">Read the full log.</a>
</p>

<h3 id="toc_4.1.2">9 November 2011 IRC Meeting</h3>

<p>
Two weeks later (this week!) we had another IRC meeting, covering three separate
RFCs: Mail, Log, and CLI.
</p>

<p>
Both the Mail and Log RFCs were approved for development, with some
questions/changes/additions/etc. highlighted during the meeting.
</p>

<p>
The CLI RFC is still somewhat rough and needs additional detail, but is headed
in the right direction. 
</p>

<p>
<a href="http://framework.zend.com/wiki/display/ZFDEV2/2011-11-09+Meeting+Log">Read the full log.</a>
</p>

<h2 id="toc_4.2">RFCs</h2>

<p>
Three new RFCs were added (and discussed):
</p>

<ul class="ul">
<li>
<a href="http://framework.zend.com/wiki/display/ZFDEV2/RFC+-+Log+refactoring">Zend\Log refactoring</a>
</li>
<li>
<a href="http://framework.zend.com/wiki/display/ZFDEV2/RFC+-+Mail+refactoring">Zend\Mail refactoring</a>
</li>
<li>
<a href="http://framework.zend.com/wiki/display/ZFDEV2/RFC+-+CLI">Console refactoring/CLI component/Tool refactoring</a>
</li>
</ul>

<p>
As noted in the section on IRC meetings, the Log and Mail RFCs have been
approved for development, and are on target for our second beta release. The CLI
RFC is still being revised, but is on target for a potential beta3 release.
</p>

<h2 id="toc_4.3">Development</h2>

<p>
Most development has centered on revisions due to feedback on beta1. In
particular, some new ideas have been fleshed out to simplify the module manager,
while simultaneously making it more flexible and easier to accomplish
initialization tasks (such as retrieving autoloading and configuration
artifacts, registering events, etc). You can <a href="https://gist.github.com/1348598">view a sample here</a>. Additionally, Ralph has been working to accommodate a
number of additional DI use cases identified by users testing the new MVC.
</p>

<p>
Matthew has removed all ZF1 MVC components and pushed them into a new module,
under "modules/ZendFramework1Mvc". As part of that work, he also identified all
components that had dependencies on the old MVC system (particularly the front
controller), and refactored them to remove those dependencies and support
dependency injection. This work is on the current master.
</p>

<p>
Enrico has been working on adapting the latest version of the Windows Azure SDK
to ZF2, as well as addressing it in the Zend\Cloud\Infrastructure component. We
should see this work hitting master early next week.
</p>

<p>
With the Mail and Log RFCs now ratified, development on these will progress, and
we should see fresh code for these components next week.
</p>

<p>
Finally, we announced that ZF2 contributions no longer require a CLA, effective 
immediately. Since the announcement, we've seen quite a number of new pull 
requests from new contributors, and we expect this trend to continue.
</p>

<h2 id="toc_4.4">Fin</h2>

<p>
These are exciting times for Zend Framework 2 development, and we encourage you
to get involved!
</p>]]></description>
      <pubDate>Fri, 11 Nov 2011 14:10:00 -0600</pubDate>
      <link>http://framework.zend.com/zf2/blog/entry/2011-11-11-Dev-status-update</link>
      <guid>http://framework.zend.com/zf2/blog/entry/2011-11-11-Dev-status-update</guid>
      <author>Matthew Weier O'Phinney</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
We've been busy since the last update!
</p>

<p>
The last update was during the busy-ness of <a href="http://zendcon.com/">ZendCon</a>, where we <a href="http://framework.zend.com/zf2/blog/entry/Zend-Framework-2-0-0beta1-Released">announced the first beta release</a> of ZF2. The release was met with a lot of enthusiasm, and we've seen increased usage and testing of ZF2 in the weeks following.
</p>

<p>
Since then, let's recap what's been going on in ZF2 development.
</p>]]></content:encoded>
    </item>
    <item>
      <title>Zend Framework 2.0.0beta1 Released!</title>
      <description><![CDATA[<p>
The Zend Framework community is pleased to announce the immediate availability
of Zend Framework 2.0.0beta1. Packages and installation instructions are
available at:
</p>

<dl>
    <dd>
    <a href="http://packages.zendframework.com/">http://packages.zendframework.com/</a>
    </dd>
</dl>

<p>
This is the first in a series of planned beta releases. The beta release
cycle will follow the "gmail" style of betas, whereby new features will
be added in each new release, and BC will not be guaranteed; beta
releases will happen <em>no less than</em> every six weeks. The desire is for
developers to adopt and work with new components as they are shipped, and
provide feedback so we can polish the distribution.
</p>

<p>
Once all code in the proposed <a href="http://framework.zend.com/wiki/pages/viewpage.action?pageId=43745438">standard distribution</a> 
has reached maturity and reasonable stability, we will freeze the API and
prepare for Release Candidate status. 
</p>


<p>
Featured components and functionality of 2.0.0beta1 include:
</p>

<ul>
<li>
New and refactored autoloaders:
<ul>
<li>
Zend\Loader\StandardAutoloader
</li>
<li>
Zend\Loader\ClassMapAutoloader
</li>
<li>
Zend\Loader\AutoloaderFactory
</li>
</ul>
</li>
<li>
New plugin broker strategy
<ul>
<li>
Zend\Loader\Broker and Zend\Loader\PluginBroker
</li>
</ul>
</li>
<li>
Reworked Exception system
<ul>
<li>
Allow catching by specific Exception type
</li>
<li>
Allow catching by component Exception type
</li>
<li>
Allow catching by SPL Exception type
</li>
<li>
Allow catching by base Exception type
</li>
</ul>
</li>
<li>
Rewritten Session component
</li>
<li>
Refactored View component
<ul>
<li>
Split helpers into a PluginBroker
</li>
<li>
Split variables into a Variables container
</li>
<li>
Split script paths into a TemplateResolver
</li>
<li>
Renamed base View class "PhpRenderer"
</li>
<li>
Refactored helpers to utilize __invoke() when possible
</li>
</ul>
</li>
<li>
Refactored HTTP component
</li>
<li>
New Zend\Cloud\Infrastructure component
</li>
<li>
New EventManager component
</li>
<li>
New Dependency Injection (Zend\Di) component
</li>
<li>
New Code component
<ul>
<li>
Incorporates refactored versions of former Reflection and
     CodeGenerator components.
</li>
<li>
Introduces Scanner component.
</li>
<li>
Introduces annotation system.
</li>
</ul>
</li>
</ul>

<p>
The above components provide a solid foundation for Zend Framework 2, and
largely make up the framework "core". However, the cornerstone feature of beta1
is what they enable: the new MVC layer:
</p>

<ul>
<li>
Zend\Module, for developing modular application architectures.
</li>
<li>
Zend\Mvc, a completely reworked MVC layer built on top of HTTP,
   EventManager, and Di.
</li>
</ul>

<p>
We've built a <a
    href="http://github.com/zendframework/ZendSkeletonApplication">skeleton
    application</a> and a <a
    href="http://github.com/zendframework/ZendSkeletonModule">skeleton
    module</a> to help get you started, as well as a <a
    href="http://packages.zendframework.com/docs/latest/manual/en/zend.mvc.quick-start.html">quick start
    guide to the MVC</a>; the new MVC is truly flexible, and moreover, simple and
powerful. 
</p>

<p>
Additionally, for those who haven't clicked on the packages link above, we are
debuting our new distribution mechanisms for ZF2: the ability to use
<a href="http://pear2.php.net">Pyrus</a> to install individual components and/or groups of
components.
</p>

<p>
Since mid-August, we've gone from a <em>few dozen</em> pull requests on the
<a href="http://github.com/zendframework/zf2">ZF2 git repository</a> to <strong><em>over 500</em></strong>,
originating from both long-time Zend Framework contributors as well as those
brand-new to the project. I'd like to thank each and every one of them, but also
call out several individuals who have made some outstanding and important
contributions during that time frame:
</p>

<ul>
<li>
<a href="http://evan.pro">Evan Coury</a>, who prototyped and then implemented the new
   module system.
</li>
<li>
<a href="http://akrabat.com">Rob Allen</a>, who, because he was doing a tutorial at
   <a href="http://conference.phpnw.org.uk/">PHPNW</a> on ZF2, provided a lot of early
   feedback, ideas, and advice on the direction of the MVC.
</li>
<li>
<a href="http://www.dasprids.de/">Ben Scholzen</a>, who wrote a new router system, in
   spite of a massive injury from a cycling accident.
</li>
<li>
<a href="http://ralphschindler.com">Ralph Schindler</a>, who has had to put up with my
   daily "devil's advocate" and "think of the user!" rants for the past several
   months, and still managed to provide comprehensive code manipulation tools, a
   Dependency Injection framework, and major contributions to the HTTP
   component.
</li>
<li>
<a href="http://www.zimuel.it/en/">Enrico Zimuel</a>, who got tossed requirements for the
   cloud infrastructure component, and then had to rework most of it after
   rewriting the HTTP client from the ground up... and who still managed three
   back-to-back-to-back conferences as we prepared the release.
</li>
<li>
<a href="http://www.linkedin.com/in/abodera">Artur Bodera</a>, who often has played
   devil's advocate, and persisted pressing his opinions on the direction of the
   framework, often despite heavy opposition. We may not implement all (or many)
   of the features you want, but you've definitely influenced the direction of
   the MVC incredibly.
</li>
<li>
<a href="http://blog.astrumfutura.com/">Pádraic Brady</a>, who
   <a href="http://zend-framework-community.634137.n4.nabble.com/A-Rant-From-Mr-Grumpy-on-ZF2-tp3721463p3721463.html">started the runaway train rolling with a rant</a>, 
   and helped make the project much more transparent, enabling the MVC
   development to occur in the first place.
</li>
</ul>

<p>
Welcome to the ZF2 beta cycle!
</p>]]></description>
      <pubDate>Tue, 18 Oct 2011 10:00:00 -0500</pubDate>
      <link>http://framework.zend.com/zf2/blog/entry/Zend-Framework-2-0-0beta1-Released</link>
      <guid>http://framework.zend.com/zf2/blog/entry/Zend-Framework-2-0-0beta1-Released</guid>
      <author>Matthew Weier O'Phinney</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
The Zend Framework community is pleased to announce the immediate availability
of Zend Framework 2.0.0beta1. Packages and installation instructions are
available at:
</p>

<dl>
    <dd>
    <a href="http://packages.zendframework.com/">http://packages.zendframework.com/</a>
    </dd>
</dl>]]></content:encoded>
    </item>
    <item>
      <title>2011-10-10 Dev status update</title>
      <description><![CDATA[<h2 id="toc_3.1">2011-09-28 IRC Meeting</h2>

<p>
We held our fourth IRC meeting on Wednesday, 28 September 2011. On the agenda
were:
</p>

<ul class="ul">
<li>
Discussion of a Doctrine Bridge
</li>
<li>
Discussion of the Standard Distribution
</li>
<li>
Roadmap
</li>
</ul>

<p>
The meeting
<a href="http://framework.zend.com/wiki/display/ZFDEV2/2011-09-28+Meeting+Log">has been summarized previously</a>.
The <strong>tl;dr</strong> for those who don't want to click through on the link:
</p>

<ul class="ul">
<li>
Everyone agrees we'd like a Doctrine Bridge; it's up to somebody to get
   something concrete rolling.
</li>
<li>
The Standard Distribution was previously defined; however, additions will be
   considered on a case-by-case basis.
</li>
<li>
Expect beta 1 to drop during ZendCon.
</li>
</ul>

<h2 id="toc_3.2">Development Notes</h2>

<h3 id="toc_3.2.1">View Convenience API</h3>

<p>
After a <a href="http://zend-framework-community.634137.n4.nabble.com/ZF2-Status-Update-tp3845571p3845571.html">prolonged discussion</a>, 
I worked on a "View Convenience API". The goal was to simplify view usage and
syntax.
</p>

<p>
The end result is a syntax very much like ZF1, but more performant under the
hood, and with easier ways to get at the various helper objects. Per a
suggestion (and pull request!) from <a href="http://akrabat.com/">Rob Allen</a>, we
now extract view variables prior to rendering the view script. Since the
Variables container returns escaped versions of variables by default, this makes
for very succinct syntax. You may also access variables using property
overloading (e.g., <code>$this-&gt;foo</code>), via a <code>get()</code> method, or by accessing the
Variables container directly. Additionally, you can now access the unescaped
values using a new <code>raw()</code> method in the renderer.
</p>

<p>
Helpers can now be accessed via method overloading, as they were in ZF1. The
following will occur:
</p>

<ul class="ul">
<li>
If the helper is invocable (i.e., a functor, implementing the <code>__invoke()</code>
   magic method), it will be invoked with any arguments passed.
</li>
<li>
If not invocable, the helper instance will be returned.
</li>
</ul>

<p>
Additionally, an "escape" view helper was created. This is composed into the
Variables container by default, and allows specifying alternate callbacks and
encoding when desired.
</p>

<pre class="highlight">
&lt;?php $this->gt;headTitle($title) ?>
&lt;h2>gt;&lt;?= $title ?>&lt;/h2>
&lt;ul>gt;
&lt;?php foreach ($entries as $entry): ?>gt;
    &lt;li>gt;&lt;?= $this->escape($entry->getName()) ?>&lt;/li>
&lt;?php endforeach ?>gt;
&lt;/ul>gt;
</pre>

<p>
<strong>tl;dr:</strong> The view layer is fun again!
</p>

<h3 id="toc_3.2.2">Controller Convenience API</h3>

<p>
Following a couple
<a href="http://zend-framework-community.634137.n4.nabble.com/ActionController-convenience-API-tp3848772p3848772.html">short</a> <a href="http://zend-framework-community.634137.n4.nabble.com/Controller-convenience-API-redux-tp3873283p3873283.html">threads</a> about a controller convenience API, I
implemented a few new features in the MVC controller layer:
</p>

<ul class="ul">
<li>
Controllers may be optionally "event injectible". If they are, they will be
   injected with the <code>MvcEvent</code> used in the <code>Application</code> object. This allows it
   to be tied more closely into the full request cycle.
</li>
<li>
Controllers may be optionally "locator aware". If they implement the
   <code>LocatorAware</code> interface, they will be injected with the DI container or
   Service Locator attached to the Application. This can be used to pull out
   optional dependencies.
</li>
<li>
We've created a controller-layer plugin broker, analagous to ZF1's "action
   helper" system. The idea behind this is to provide re-usable functionality
   for controllers in a light-weight fashion. Unlike ZF1, these plugins will not
   be workflow-aware, and will only optionally be injected with the current
   controller (based on presence of a <code>setController()</code> method).
</li>
<li>
You can access controller plugins via method overloading. Unlike view
   helpers, method overloading only ever returns the plugin instance.
</li>
</ul>

<p>
So, in a nutshell:
</p>

<pre class="highlight">
class FooController extends ActionController
{
    public function processAction()
    {
        // Locator-awareness for pulling conditional functionality:
        $form = $this-&gt;getLocator()-&gt;get('foo-form');
        
        $post = $this-&gt;getRequest()-&gt;post()-&gt;toArray();
        if ($form-&gt;isValid($post)) {
            // do some processing
            // Redirection via a plugin:
            return $this-&gt;redirect()-&gt;toRoute('foo-success');
        }
    }
}
</pre>

<p>
Working controller plugins now include:
</p>

<ul class="ul">
<li>
<strong>Url</strong> (generates URLs from a configured router)
</li>
<li>
<strong>Redirect</strong> (updates the Response object with a redirect status code an Location
   header; Location URL can be either a static URL or generated from the router)
</li>
<li>
<strong>FlashMessenger</strong> (session-based flash messages)
</li>
<li>
<strong>Forward</strong> (dispatch an additional controller)
</li>
</ul>

<p>
The last plugin enables users to dispatch an additional controller -- without
requiring a dispatch loop within the <code>Application::run()</code> logic! It <em>does</em>,
however, require that the controller calling it be defined as <code>LocatorAware</code>, so
that it can obtain the configured controller instance.
</p>

<p>
<strong>tl;dr:</strong> The Controller layer is getting a lot of good functionality.
</p>

<h3 id="toc_3.2.3">Zend\Code refactoring</h3>

<p>
Ralph worked for several weeks on a refactoring of the <code>Zend\Code</code> component.
Part of this was moving <code>Reflection</code> and <code>CodeGenerator</code> under that tree, as
well as ensuring the APIs were consistent across all three components (as
<code>Zend\Code</code> also contains the <code>Scanner</code> component). This work was merged on 6
October 2011. 
</p>

<p>
Part of this update also included a comprehensive annotations parser. This
allows us to now scan docblocks for annotations and represent them as objects,
giving rise to a number of potential new workflows for ZF2.
</p>

<h3 id="toc_3.2.4">DI Updates</h3>

<p>
One key driver behind annotations support was to allow using annotations to hint
to the DI Compiler how to create definitions. Additionally, work was done to
allow creating definitions via configuration. This allows things like:
</p>

<pre class="highlight">
use Zend\Di\Definition\Annotation as Di;

class Foo
{
    /**
     * @Di\Inject()
     */
    public function setEvents(EventCollection $events)
    {
    }
}
</pre>

<p>
which will inform the DI container that this method should be injected at
construction. Additionally, you can now do things like this:
</p>

<pre class="highlight">
$config['di'] = array(
'definition' => array('class' => array(
    'Mongo' => array(
        '__construct' => array(
            'server'  => array(
                'required' => false,
                'type'     => false,
            ),
            'options' => array('required' => false),
        ),
    ),
    'MongoDB' => array(
        '__construct' => array(
            'conn' => array(
                'required' => true,
                'type'     => 'Mongo',
            ),
            'name' => array(
                'required' => true, 
                'type'     => false,
            ),
        ),
    ),
    'MongoCollection' => array(
        '__construct' => array(
            'db' => array(
                'required' => true,
                'type'     => 'MongoDB',
            ),
            'name' => array(
                'required' => true, 
                'type'     => false,
            ),
        ),
    ),
    'Blog\EntryResource' => array(
        'setCollectionClass' => array(
            'class' => array(
                'required' => false,
                'type'     => false,
            ),
        ),
    ),
)),
'instance' => array(
    'Mongo' => array('parameters' => array(
        'server'  => 'mongodb://localhost:27017',
    )),
 
    'MongoDB' => array( 'parameters' => array(
        'conn' => 'Mongo',
        'name' => 'myblogdb',
    )),
 
    'MongoCollection' => array('parameters' => array(
        'db'   => 'MongoDB',
        'name' => 'entries',
    )),
 
    'Blog\EntryResource' => array('parameters' => array(
        'dataSource' => 'CommonResource\DataSource\Mongo',
        'class'      => 'CommonResource\Resource\MongoCollection',
    )),
 
    'CommonResource\DataSource\Mongo' => array('parameters' => array(
        'connection' => 'MongoCollection',
    )),
));
</pre>

<p>
The above will ensure that we use the provided scalar values for injection in
the various constructors and setters in the definition, and still allows for
object injection when required (e.g., conn, db, dataSource, connection).
</p>

<p>
<strong>tl;dr:</strong> DI has become incredibly flexible and powerful!
</p>

<h3 id="toc_3.2.5">Cloud Infrastructure</h3>

<p>
Enrico managed to finish testing all <code>Zend\Cloud\Infrastructure</code> functionality,
with <em>both</em> online <em>and</em> offline tests! This gives us great confidence in the
components (plural, as all infrastructure services also have related components
under <code>Zend\Service</code>), and makes for a great new feature in ZF2. Enrico also
backported the Infrastructure component to ZF1's trunk, in anticipation of an
additional release on the ZF1 tree in the future.
</p>

<h3 id="toc_3.2.6">CLI Module</h3>

<p>
<a href="http://robertbasic.com/">Robert Basic</a> <a href="http://zend-framework-community.634137.n4.nabble.com/A-ZF2-Cli-module-tp3865659p3865659.html"> wrote to the list about a prototype CLI
module</a>. The basic idea is to leverage the module architecture for executing CLI
requests; routing would be performed utilizing <code>Zend\Console\Getopt</code> instead of
the MVC router. Additionally, it would provide functionality for colorizing
output. Overall, a solid beginning to a potential new console component!
</p>

<h3 id="toc_3.2.7">Presentations</h3>

<p>
Both <a href="http://akrabat.com">Rob Allen</a> and <a href="http://robertbasic.com">Robert Basic</a>
gave presentations during the weekend of 7 - 9 October 2011, with Robert Basic
giving a general overview session on ZF2 at <a href="http://webkonf.org/">Webkonf</a> and
Rob Allen giving a full day tutorial at <a href="http://phpnw.org.uk">PHPNW</a>. Rob Allen's
slides may be viewed
<a href="http://akrabat.com/wp-content/uploads/PHPNW11-ZF2-Tutorial.pdf">online</a>.
</p>

<h2 id="toc_3.3">The Future</h2>

<p>
We have an
<a href="http://framework.zend.com/wiki/display/ZFDEV2/2011-10-12+Meeting+Agenda">IRC
meeting this coming Wednesday, 12 Oct 2011</a>; please post topics and/or vote on
those already posted -- and make sure you're in attendance for the discussions!
</p>

<p>
Also, we'll be tagging <strong>beta1</strong> this week, in preparation for a release during
ZendCon next week. If you have feedback on the MVC or DI, please let us know
ASAP!
</p>]]></description>
      <pubDate>Mon, 10 Oct 2011 16:40:00 -0500</pubDate>
      <link>http://framework.zend.com/zf2/blog/entry/2011-10-10-Dev-status-update</link>
      <guid>http://framework.zend.com/zf2/blog/entry/2011-10-10-Dev-status-update</guid>
      <author>Matthew Weier O'Phinney</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    Status update for the weeks of 27 September - 10 October 2011.
</p>]]></content:encoded>
    </item>
    <item>
      <title>2011-09-26 Dev status update</title>
      <description><![CDATA[<h2 id="toc_4.1">2011-09-14 IRC Meeting</h2>

<p>
We held our third IRC meeting on Wednesday, 14 September 2011. On the agenda
were:
</p>

<ul class="ul">
<li>
<a href="http://framework.zend.com/wiki/display/ZFDEV2/Comparison+of+config+styles">RFC on configuration</a>
</li>
<li>
Where components falling outside the standard distribution should live if
   incomplete
</li>
<li>
Goals of the Module Manager
</li>
<li>
Directory structure for modules
</li>
</ul>

<h3 id="toc_4.1.1">Configuration</h3>

<p>
Between the competing RFCs on configuration, the IRC discussion, and some
back-and-forth following the meeting, the following summarizes the current
consensus on how ZF2 will deal with component configuration:
</p>

<ul class="ul">
<li>
Hard dependencies that do not have sane defaults would be in the constructor
   signature
</li>
<li>
The last argument in the constructor signature would be optional, and expect
   an instance of the component's Options class
</li>
<li>
If a dependency has a sane default, we would not include an argument in the
   constructor, but <em>would</em> allow setter injection (which could be automated by
   the DI container)
</li>
<li>
The component's Options class would handle optional configuration arguments,
   and provide validation for those arguments.
</li>
<li>
The component would directly access optional arguments from the Options
   instance it composes
</li>
</ul>

<p>
Note the word "Options". In discussions, we decided we should call this
functionality "Options" as it denotes that the values are optional, and also to
prevent nomenclature conflicts with the already existing <code>Zend\Config</code>
component. We will be producing a poll on the wiki to do a final vote <em>very soon</em>. 
</p>

<h3 id="toc_4.1.2">Unfinished "Extras" components</h3>

<p>
The discussion centered around whether or not we would remove unrefactored
components that fall outside the standard distribution -- things like service
components that have not been converted to namespaces, updated to latest
exceptions practices, and not refactored to use the new HTTP functionality.
</p>

<p>
Only slight debate erupted -- the decision is:
</p>

<ul class="ul">
<li>
Keep this functionality in the master branch
</li>
<li>
Add an annotation such as "@incomplete" to the file and/or class-level
   docblocks.
</li>
<li>
Add the "@incomplete" annotation to related test classes, and add a rule to
   <code>phpunit.xml</code> to skip such tests.
</li>
<li>
Comment out sections in the manual referring to these components.
</li>
</ul>

<p>
We will then add rules to packaging to omit such classes and resources.
</p>

<h3 id="toc_4.1.3">Module Manager Goals</h3>

<p>
The Module Manager is a component for scanning and initializing modules during
application bootstrapping. As such, it's fairly central to the new MVC approach,
and we wanted to be sure we captured its goals. A sizable list of goals was
presented, and we voted on each. There are too many to relate here, so instead
I'll simply
<a href="http://framework.zend.com/wiki/display/ZFDEV2/2011-09-14+Meeting+Log#2011-09-14MeetingLog-ModuleManagergoals">link you to the summary</a>.
</p>

<p>
Most items were straight-forward, but there are a few conflicting ideas about
what the scope of the manager; should it simply act as a kernel for
bootstrapping, or have deep ties within the application?
</p>

<p>
Current development of this tool has taken the former approach, but has exposed
a number of useful features that allow a ton of flexibility for a variety of
approaches. One, in particular, is a method <code>getLoadedModules()</code>, which returns
an associative array of module name/module objects. With this, I was able to do
such things as loop through modules, check for the existence of specific
methods, and then call them to do things such as event listener registration. 
</p>

<h3 id="toc_4.1.4">Module Directory Structure</h3>

<p>
By the time of the meeting, we already had a couple different module directory
structures floating around, and the discussion centered on which one to use.
Except that several people brought up one very, very good point: with a
well-known class (the module's "Module" class) that we're querying, the
structure doesn't matter, and does not need to be enforced.
</p>

<p>
As such, our decision was that we should have a <em>recommended</em> structure that
satisfies the various use cases we originally brainstormed. Among these:
</p>

<ul class="ul">
<li>
Ability to serve multiple namespaces (if desired)
</li>
<li>
Separation of code from non-code assets, if provided (such as CSS, JS, HTML)
</li>
<li>
Separation of view templates, if provided, from code
</li>
<li>
Separation of configuration, if provided, from code
</li>
</ul>

<p>
As such, the following structure was <em>generally</em> agreed upon as a
recommendation:
</p>

<pre class="highlight">
modules/
    SpinDoctor/
        Module.php
        autoload_classmap.php
        autoload_function.php
        autoload_register.php
        configs/
            module.config.php
            routes.config.ini
        public/
            images/
            css/
                spin-doctor.css
            js/
                spin-doctor.js
        src/
            SpinDoctor/
                Controller/
                    SpinDoctorController.php
                    DiscJockeyController.php
                Form/
                    Request.php
        tests/
            bootstrap.php
            phpunit.xml
            SpinDoctor/
                Controller/
                    SpinDoctorControllerTest.php
                    DiscJockeyControllerTest.php
        views/
            spin-doctor/
                album.phtml
            disc-jockey/
                turntable.phtml
</pre>

<p>
Public assets such as images, CSS, and JS could either be symlinked into the
public tree, copied, or managed by an asset manager such as
<a href="https://github.com/kriswallsmith/assetic">Assetic</a>. 
</p>

<p>
Regarding the various <code>autoload_*.php</code> files, these were brought up in a
<a href="http://ralphschindler.com/2011/09/19/autoloading-revisited">post from Ralph</a>,
based on discussions he and I have had. The idea behind these is that we can
satisfy several typical use cases for modules:
</p>

<ul class="ul">
<li>
Download and use: simply <code>require 'autoload_register.php';</code> and start using
   classes.
</li>
<li>
Use with custom registration: <code>spl_autoload_register(include 'autoload_function.php');</code>, 
   which allows you to specify to <code>spl_autoload_register</code> whether or not to
   append or prepend the function to your autoloader stack.
</li>
<li>
Custom autoloading class map: aggregate the returns of
   <code>autoload_classmap.php</code> into a single classmap for your application.
</li>
</ul>

<p>
There's still some discussion going around these files, but they've been adopted
in the prototypes at this time.
</p>

<h2 id="toc_4.2">MVC Prototype Status</h2>

<p>
The MVC prototype has grown tremendously, in large part due to the efforts of
<a href="http://evan.pro/">Evan Coury</a> and his work on the Module Manager. The module
manager now does the following:
</p>

<ul class="ul">
<li>
Aggregates configuration from all modules
    <ul class="ul">
    <li>
    Including modules provided as phars!
    </li>
    </ul>
</li>
<li>
Provides introspection and access to discovered modules
</li>
<li>
Optionally allows configuration caching
</li>
</ul>

<p>
The MVC prototype has also grown. Based on a suggestion from Greg N. on the
mailing lists, the EventManager was refactored slightly to do the following:
</p>

<ul class="ul">
<li>
Removed references to "handlers" in favor of "listeners" to provide a
   consistent terminology (both internally as well as with other systems of
   similar design)
</li>
<li>
<code>trigger</code> now allows passing an <code>Event</code> object for any one of its required
   arguments. This allows creation of custom <code>Event</code> objects, as well as re-use
   of them.
</li>
<li>
<code>trigger</code> was modified to allow an optional final argument, either the fourth
   argument or an argument following an <code>Event</code> object: a callback that
   indicates whether or not to halt execution. This largely eliminates the need
   for <code>triggerUntil</code> at this time.
</li>
<li>
Locally attached listeners are now combined with static listeners into a
   single priority queue when <code>trigger</code> is called. This provides a consistent
   expectation, and allows you to register static listeners that can be called
   prior to those attached locally.
</li>
</ul>

<p>
What the above allowed was the ability to move routing and dispatching into
listeners within <code>Zend\Mvc\Application</code>, using a custom <code>MvcEvent</code> object. The
upshot is:
</p>

<ul class="ul">
<li>
Simpler code
</li>
<li>
Accessors for well-known (and/or expected) objects (e.g., <code>getRequest()</code>,
   <code>getRouteMatch()</code>, <code>getResult()</code>)
</li>
<li>
Events are registered with priority in order to shape the execution workflow
</li>
<li>
The ability to replace the default routing and dispatch listeners with custom
   listeners.
</li>
</ul>

<p>
This last point allowed me to prototype a 
<a href="https://github.com/weierophinney/zf-quickstart/tree/features/zf2_mvc-zf1_emulation">ZF1-emulation layer in the new ZF2 paradigm</a>.
This effort was surprisingly easy, and helped illustrate how flexible the
prototype can be.
</p>

<p>
Additional work on the MVC centered around error handling, and providing a
simple mechanism for discovering and handling errors. The 
<a href="https://github.com/weierophinney/zf-quickstart/tree/features/zf2-mvc-module">zf-quickstart example</a>
showed that this largely eliminates the need for an <code>ErrorController</code>.
</p>

<p>
At this time, we're quickly closing in on what the MVC will likely look like for
ZF2, and hope to merge the <code>ZendMvc</code> and <code>ZendModule</code> modules into the library
very soon.
</p>

<h2 id="toc_4.3">DI Annotation Support</h2>

<p>
Ralph has been refactoring the <code>Reflection</code>, <code>CodeGenerator</code>, and <code>Code\Scanner</code>
components to follow a consistent API, and to live under a common tree,
<code>Zend\Code</code>. Part of this work is to also provide a parser/tokenizer for PHP
docblocks, with the goal of providing annotation support to components that need
it. In particular, this could assist the Dependency Injection component,
allowing more intelligent hinting as to what setters are required and/or the
specific arguments to inject. Another potential use might be with modules, to
indicate what they provide and/or methods that should be called at
initialization.
</p>

<p>
This work should hit master this week, and will be compatible with the
<a href="http://pecl.php.net/package/docblock">docblock extension</a>.
</p>

<h2 id="toc_4.4">Cloud Infrastructure</h2>

<p>
Enrico has been working on updating the Amazon, Rackspace, and GoGrid services
to use the new HTTP functionality. In doing so, he's discovered areas where the
HTTP component needed improvement, as well as places he could better test. At
this time, all changes he's done are incorporated in the master branch, with the
exception of some tests for GoGrid.
</p>

<p>
This work has helped round out a new offering in Zend Framework, as well as to
test recent development work and ideas such as the HTTP component and the
Options proposal.
</p>

<h2 id="toc_4.5">The Future</h2>

<p>
There are new RFCs and discussions erupting regularly on the mailing list and in
the #zftalk.2 IRC channel on Freenode; I encourage you to subscribe to the former and join in the latter so that you can participate.
</p>

<p>
Also, we have an IRC meeting <em>this week</em>, 28 September 2011 at 17:00 UTC. The
<a href="http://framework.zend.com/wiki/display/ZFDEV2/2011-09-28+Meeting+Agenda">agenda</a>
is online, but could potentially use some more topics and votes. Talk to you
Wednesday!
</p>]]></description>
      <pubDate>Mon, 26 Sep 2011 17:00:00 -0500</pubDate>
      <link>http://framework.zend.com/zf2/blog/entry/2011-09-26-Dev-status-update</link>
      <guid>http://framework.zend.com/zf2/blog/entry/2011-09-26-Dev-status-update</guid>
      <author>Matthew Weier O'Phinney</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    Zend Framework status update for the weeks of 13 - 26 September 2011.
</p>]]></content:encoded>
    </item>
    <item>
      <title>2011-09-12 Dev status update</title>
      <description><![CDATA[<p>
Much has happened since our last update.
</p>

<h2 id="toc_3.1">2011-08-31 IRC Meeting</h2>

<p>
First, we held our
<a href="http://framework.zend.com/wiki/display/ZFDEV2/2011-08-31+Meeting+Log"> second IRC
meeting</a> on Wednesday, 31 August 2011. The intended purpose of the meeting was
to discuss and vote on two RFCs,
<a href="http://framework.zend.com/wiki/display/ZFDEV2/RFC+-+ZF2+Modules">Modules</a> and
<a href="http://framework.zend.com/wiki/pages/viewpage.action?pageId=43745438">Distribution</a>.
Discussion was heated for much of the meeting, but a number of ideas were
clarified and ratified during the process. In particular, we gained consensus
surrounding the difference between components and modules, and started a
conversation surrounding what we may include in modules in the future.
Visit the
<a href="http://framework.zend.com/wiki/display/ZFDEV2/2011-08-31+Meeting+Log">meeting log</a>
for more details.
</p>

<h2 id="toc_3.2">MVC Prototyping</h2>

<p>
Following the meeting, I created and published the first "official" MVC
prototype in a <a href="https://github.com/weierophinney/zf2/tree/prototype/mvc-module">branch of my repository</a>.
The prototype was created as a module (under "modules/Zf2Mvc") in order to also
prototype one suggested format for developing modules under ZF2. We had
<a href="http://zend-framework-community.634137.n4.nabble.com/ZF2-MVC-Prototype-tp3792474p3792474.html">two</a>
<a href="http://zend-framework-community.634137.n4.nabble.com/Updated-prototype-plus-quickstart-tp3797750p3797750.html">threads</a>
in the mailing list detailing and discussing the prototype. At the time of this
writing, all major feedback has been incorporated.
</p>

<p>
Building on top of the MVC prototype, I then created a new branch of the
<a href="https://github.com/weierophinney/zf-quickstart">zf-quickstart</a> project that
utilizes the new prototype, which also resulted in a 
<a href="http://zend-framework-community.634137.n4.nabble.com/Updated-prototype-plus-quickstart-tp3797750p3797750.html">fair bit of discussion</a>.
</p>

<p>
In IRC, <a href="http://akrabat.com">Rob Allen</a> and <a href="http://evan.pro">Evan Coury</a> took the
prototype and quickstart as a starting point for a "Module Manager" component
that could discover module configuration, autoloading, etc. Evan quickly
developed a new module, "Zf2Module," for exactly this purpose (code is
<a href="https://github.com/EvanDotPro/zf2/tree/prototype/mvc-module/modules/Zf2Module">on GitHub</a>.
After a few revisions, he created a <a href="https://github.com/EvanDotPro/zf2-sandbox">"sandbox" project</a>
that illustrates how one might start a project and gradually add modules to it
in order to enable new features. Included in the project is a basic homepage and
error page as a discrete module, based on the quickstart; a "user" module for
simple user authentication and registration; and the guest book from the
quickstart. 
</p>

<p>
<strong>The tl;dr</strong>: Lots of momentum on the MVC front, with viable MVC and module
system prototypes.
</p>
 
<h2 id="toc_3.3">Options, configuration, and what? Oh, My!</h2>

<p>
Early last week, <a href="http://ralphschindler.com">Ralph</a> wrote up 
<a href="http://framework.zend.com/wiki/display/ZFDEV2/RFC+-+Object+instantiation+and+configuration">a proposal for configuration</a> in ZF2,
and
<a href="http://zend-framework-community.634137.n4.nabble.com/RFC-ZF2-Object-Instantiation-And-Configuration-tp3794736p3794736.html">opened a thread in the mailing list</a>.
The response was fairly heated, and resulted in <a href="http://framework.zend.com/wiki/display/ZFDEV2/RFC+-+better+configuration+for+components">a counter-proposal</a> within an
hour or two by Artur Bodera, followed by
<a href="http://zend-framework-community.634137.n4.nabble.com/RFC-object-based-configuration-for-components-was-unified-API-tp3797085p3797085.html">more discussion on the list</a>, 
and then <a href="http://zend-framework-community.634137.n4.nabble.com/ZF2-Option-Arrays-vs-Parameter-Objects-tp3796184p3796184.html">even more discussion</a>.
</p>

<p>
After the dust settled, the basic consensus appears to be:
</p>

<ul class="ul">
<li>
Denote hard dependencies in the constructor (if no sane default is likely)
</li>
<li>
Aggregate "soft" dependencies (i.e., optional configuration) as
   component-specific "configuration objects", which will allow:
</li>
<ul class="ul">
<li>
Moving option validation into configuration objects
</li>
<li>
Resulting in fewer necessary internal variables (pull these options from
      the config object)
</li>
<li>
Re-use of configuration objects with many instances
</li>
<li>
Ability to create config object extensions with application-specific
      defaults
</li>
<li>
Better hinting for IDEs
</li>
<li>
Potentially easier to document options
</li>
</ul>
</ul>

<p>
However, we still need to vote on this topic. (Hint: I'll be proposing it for
this week's IRC meeting.)
</p>

<h2 id="toc_3.4">Pull Requests, Sweet Pull Requests</h2>

<p>
I managed to merge in something like 50 new pull requests in the past week. Keep
'em coming!
</p>

<h2 id="toc_3.5">The Future</h2>

<p>
We've been reviewing options for distributing ZF and potentially modules. At
this time, candidates include <a href="http://pear.php.net">PEAR</a>, <a href="http://pear2.php.net">
Pyrus</a>, <a href="http://packagist.org">Composer</a>, or going home-grown. We've been
reviewing our options, and doing some prototyping, and hope to have a
recommendation this week.
</p>

<p>
I've been working on some proposals surrounding the View layer, and getting some
initial feedback from interested parties before posting some RFCs; they should
be posted early this week, however.
</p>

<p>
There are new RFCs and discussions erupting daily on the mailing list and in
the #zftalk.2 IRC channel on Freenode; I encourage you to subscribe to the
former and join in the latter so that you can participate.
</p>]]></description>
      <pubDate>Mon, 12 Sep 2011 17:20:00 -0500</pubDate>
      <link>http://framework.zend.com/zf2/blog/entry/2011-09-12-Dev-status-update</link>
      <guid>http://framework.zend.com/zf2/blog/entry/2011-09-12-Dev-status-update</guid>
      <author>Matthew Weier O'Phinney</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    Zend Framework status update for the weeks of 30 August - 12 September 2011.
</p>]]></content:encoded>
    </item>
    <item>
      <title>2011-08-31 IRC Meeting Log</title>
      <description><![CDATA[<p>
    Today we held our second Zend Framework community IRC meeting. The meeting 
    was held on Freenode IRC in the #zf2-meeting channel, and moderated by 
    Pieter Kokx. The meeting ran long (15 minutes over), had several heated 
    exchanges, but gained general consensus on a variety of topics.
</p>

<p>
    Specifically, we discussed:
</p>

<ul class="ul">
    <li>Modules - defining what "module" means, and differentiating it from 
        "component", as well as defining these terms in relation to "library" 
        and "application".
    </li>
    <li>Distribution categories - what broad categories we'll define as "buckets"
        for components, and which categories will be considered necessary for the 
        "standard distribution" -- which defines what needs to be done to be 
        considered stable.
    </li>
    <li>Timeframes for potential releases.</li>
</ul>

<p>
    The full transcript, as well as a summary of decisions, can be found on the
    <a href="http://framework.zend.com/wiki/display/ZFDEV2/2011-08-31+Meeting+Log">ZF2 
    wiki</a>.
</p>]]></description>
      <pubDate>Wed, 31 Aug 2011 16:50:00 -0500</pubDate>
      <link>http://framework.zend.com/zf2/blog/entry/2011-08-31-IRC-Meeting-Log</link>
      <guid>http://framework.zend.com/zf2/blog/entry/2011-08-31-IRC-Meeting-Log</guid>
      <author>Matthew Weier O'Phinney</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    Today we held our second Zend Framework community IRC meeting. Find out what
    we discussed, and where you can read the transcript.
</p>]]></content:encoded>
    </item>
    <item>
      <title>2011-08-30 Dev status update</title>
      <description><![CDATA[<p>
Since the last community update, we've had a number of successes... as well as
setbacks.
</p>

<p>
First, completion of the initial HTTP component development took a bit longer
than anticipated. As a team we felt the need to ensure that we had at least the
basic documentation covered, and in doing so, uncovered additional use cases
that needed fixing. We felt this was time well-invested however, as most code
currently using <code>Zend\Http\Client</code> should work with little to no modification
from the original --- while sporting a much better design that better separates
concerns between a request object, response object, and the client invoking
them. 
</p>

<p>
This allows us to announce a new developer snapshot, 2.0.0dev4:
</p>

<ul class="ul">
    <li>Zip: <a href="http://framework.zend.com/releases/ZendFramework-2.0.0dev4/ZendFramework-2.0.0dev4.zip">http://framework.zend.com/releases/ZendFramework-2.0.0dev4/ZendFramework-2.0.0dev4.zip</a></li>
    <li>Tar: <a href="http://framework.zend.com/releases/ZendFramework-2.0.0dev4/ZendFramework-2.0.0dev4.tar.gz">http://framework.zend.com/releases/ZendFramework-2.0.0dev4/ZendFramework-2.0.0dev4.tar.gz</a></li>
</ul>

<p>
Also in this release, we were able to convert documentation to DocBook 5,
<code>Zend\Dojo</code> was brought up-to-date with changes in ZF1, and much, much more due
to the efforts of a large number of contributors who have submitted an
unprecedented number of pull requests in the past several weeks.
</p>

<p>
Second, we also had a number of infrastructure issues. Our mailing list went
black for 3-4 days, and no real solution was found. However, the pipes appear to
be fully open at this point, and we've had some great discussion over the
weekend and early this week.
</p>

<h2>RFCs</h2>

<p>
A couple of RFCs have been posted:
</p>

<ul class="ul">
    <li>
        <a href="http://framework.zend.com/wiki/pages/viewpage.action?pageId=43745438">RFC - What will the ZF2 distribution include?</a></li>
        <ul class="ul">
            <li><a href="http://zend-framework-community.634137.n4.nabble.com/RFC-What-will-the-ZF2-distribution-include-tp3763888p3763888.html">Mailing list discussion</a></li>
        </ul>
    </li>
    <li>
        <a href="http://framework.zend.com/wiki/display/ZFDEV2/RFC+-+ZF2+Modules">RFC - ZF2 Modules</a>
        <ul class="ul">
            <li><a href="http://zend-framework-community.634137.n4.nabble.com/RFC-ZF2-Modules-tp3776616p3776616.html">Mailing list discussion</a></li>
        </ul>
    </li>
</ul>

<p>
If you have any input, we'd appreciate having it ASAP, so that we can finalize
these and move on to defining discrete development tasks.
</p>

<h2>IRC Meeting this week</h2>

<p>
We have another IRC meeting at 17:00 UTC on 31 Aug 2011. The <a 
href="http://framework.zend.com/wiki/display/ZFDEV2/2011-08-31+Meeting+Agenda">agenda 
is on the wiki</a>, and we invite you to add/comment/vote on topics prior to 
the meeting. Votes will be closed approximately 1 hour prior to the meeting.
</p>

<h2>Current development</h2>

<p>
We're planning on working on a few items in the next week or so, roughly in
order of priority:
</p>

<ul class="ul">
<li>Creation of a dedicated branch for the MVC prototype currently in the zf-quickstart project.
</li>
<li>
Investigation of <a href="http://pear2.php.net">Pyrus</a> to see if it can meet the
   requirements set forth by the community on both distribution of the framework
   as well as potentially modules.
</li>
<li>
Investigation of <a href="http://php.net/phar">phar</a> as a foil to the above (but more
   particularly for module distribution).
</li>
<li>
Continued collaboration on the Router.
</li>
</ul>]]></description>
      <pubDate>Tue, 30 Aug 2011 17:20:00 -0500</pubDate>
      <link>http://framework.zend.com/zf2/blog/entry/2011-08-30-Dev-status-update</link>
      <guid>http://framework.zend.com/zf2/blog/entry/2011-08-30-Dev-status-update</guid>
      <author>Matthew Weier O'Phinney</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    Zend Framework status update for the week of 22 - 29 August 2011.
</p>]]></content:encoded>
    </item>
    <item>
      <title>2011-08-19 Dev status update</title>
      <description><![CDATA[<h2>Community Initiatives</h2>

<p>
    Obviously, community interaction has exploded. Since last week, we've had
    almost 400 messages in the <a
        href="http://zend-framework-community.634137.n4.nabble.com/ZF-Contributor-f680267.html">zf-contributors
        mailing list</a>, an IRC meeting, and the start of a dedicated "ZF2"
    area of the main website (if you're reading this, you're in it). 
</p>

<p>Topics that have been under heavy discussion include:</p>

<ul>
    <li>What will modules look like, and how will they be installed (and potentially distributed).</li>
    <li>Process: how should the proposal process work moving forward, and what ideas fit for it. One item we've agreed upon is that for architectural issues, posting to the mailing list, discussing in IRC, and creating RFC-style pages in the wiki is probably better.</li>
    <li>Visualizing development status: <a href="http://framework.zend.com/zf2/status">a page has been built</a>, based on the work of Evan Coury in his <a href="https://github.com/EvanDotPro/zf-status">zf-status</a> project. This should help folks identify what new changes and features exist that they may want to review.</li>
</ul>

<p>
    If you missed the IRC meeting, we have a <a
        href="http://framework.zend.com/zf2/blog/entry/2011-08-17-IRC-Meeting-Log">summary
    posted</a>.
</p>   

<h2>Development status</h2>

<p>
    
    
    The Zend Framework core team has decided to write, every week, a post on this blog to inform about the development status of ZF2.<br />
    The aim of this update is to have a new channel where the developers that are working on the ZF2 can share ideas with the community and inform people about the working progress of the project. Of course, we have the <a href="http://framework.zend.com/wiki/display/ZFDEV2/Home">ZF wiki</a>, the <a href="http://framework.zend.com/wiki/display/ZFDEV/Contributing+to+Zend+Framework#ContributingtoZendFramework-Subscribetotheappropriatemailinglists">mailing lists</a> and the IRC channels (#zftalk.dev, #zf2-meeting) but we think that this blog can be helpful as well.<br />
    This is the first post of the new ZF2 blog about the dev status update of ZF2. We hope you will find it useful.<br />
</p>

<p>
    In the last week the Zend Framework Core Team has been involved in the development of the new Zend\Http components.
    In particular we have redesigned the following classes:<br />
    <ul>
        <li>Zend\Http\Request</li>
        <li>Zend\Http\Response</li>
        <li>Zend\Http\Headers</li> 
        <li>Zend\Http\Client</li>    
    </ul><br />
    We implemented these components following the RFC specifications:<br /><br />
    <ul>
        <li><a href="http://tools.ietf.org/html/rfc2616">RFC2616</a>, for the HTTP 1.1</li>
        <li><a href="http://tools.ietf.org/html/rfc3986">RFC3986</a>, for the Uniform Resource Identifier (URI)</li>
        <li><a href="http://tools.ietf.org/html/rfc2069">RFC2069</a>, <a href="http://tools.ietf.org/html/rfc2617">RFC2617</a>, for the HTTP Authentication: Basic and Digest Access Authentication</li>
    </ul>
    <br />
    The new API provided is more convenient compared with the ZF1. We provided a full OO implementation of the
    Headers with specific features for each type (for instance we have Zend\Http\Header\Accept that implements the Accept header type).<br />
    These classes are implemented in the namespace Zend\Http\Header. In order to support not standard headers we built a
    generic header class, Zend\Http\Header\GenericHeader.
</p>
<p>
    The new Zend\Http\Client is basically a class that uses the Request, Response, Headers components to send request to a specific HTTP adapter.<br />
    Just to give you an idea of these new architecture, we reported an example of two different uses for the same use case:<br /><br />
    <b>First example</b>
    <pre class="highlight">
    $client= new Zend\Http\Client('http://www.test.com');
    $client->setMethod('POST');
    $client->setParameterPost(array('foo' => 'bar));
    
    $response= $client->send();
    
    if ($response->isSuccess()) {
        //  the POST was successfull
    }
    </pre>
    <b>Second example</b>
    <pre class="highlight">
    $request= new Zend\Http\Request();
    $request->setUri('http://www.test.com');
    $request->setMethod('POST');
    $request->setParameterPost(array('foo' => 'bar));
    
    $client= new Zend\Http\Client();
    $response= $client->send($request);
    
    if ($response->isSuccess()) {
        //  the POST was successfull
    }
    </pre><br />
    Moreover, we implemented a static version of the Zend\Http\Client to be able to write something simple code like that:<br />
    <pre class="highlight">
    $response= Zend\Http\ClientStatic::post('http://www.test.com',array('foo'=>'bar'));
    
    if ($response->isSuccess()) {
        //  the POST was successfull
    }
    </pre>
</p>    
]]></description>
      <pubDate>Fri, 19 Aug 2011 14:32:00 -0500</pubDate>
      <link>http://framework.zend.com/zf2/blog/entry/2011-08-19-Dev-status-update</link>
      <guid>http://framework.zend.com/zf2/blog/entry/2011-08-19-Dev-status-update</guid>
      <author>Enrico Zimuel</author>
      <dc:creator>Enrico Zimuel</dc:creator>
      <content:encoded><![CDATA[<p>
    The first weekly status update about the development of ZF2.
</p>]]></content:encoded>
    </item>
  </channel>
</rss>

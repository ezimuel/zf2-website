<?= $this->partial('manual/sidebar') ?>
<?= $this->partial('manual/header', array('active' => 'components')) ?>

<?= $this->dynamicHeader('subPageMainHeader', 'What is Zend Framework?') ?>

<p class="first">
    Zend Framework is a simple, straightforward, open-source <a
    href="http://en.wikipedia.org/wiki/Software_framework" target="_blank">software
    framework</a> for PHP 5 designed to eliminate the tedious details of coding and
    let you focus on the big picture. One of its strengths is the highly modular <a
    href="http://en.wikipedia.org/wiki/Model-view-controller"
    target="_blank">Model-View-Controller (MVC)</a> design, making your code more
    reusable and easier to maintain.
</p>

<div class="dotted-line"></div>

<h3><a name="Goals"></a>Goals of Zend Framework components</h3>

<p>
    The following lists the components of Zend Framework, each with a brief
    description and list of goals for each component.
</p>

<h3><a name="ZendAcl"></a><a href="/manual/en/zend.acl.html">Zend_Acl</a></h3>

<p>
    Zend_Acl provides lightweight and flexible access control list (ACL)
    functionality and privileges management.
</p>

<ul class="ul">
    <li>includes basic implementations for both Roles and Resources</li>
    <li>Roles and Resources may be instances of user-defined classes</li>
    <li>simplifies the specification of access control rules with inheritance support</li>
    <li>supports conditional access control rules via an assertion interface</li>
</ul>

<h3><a name="ZendAuth"></a><a href="/manual/en/zend.auth.html">Zend_Auth</a></h3>

<p>
    Zend_Auth provides an API for authentication and includes concrete
    authentication adapters for common use case scenarios, as well as "Identity
    2.0" adapters such as OpenID and Microsoft InfoCard.
</p>

<ul class="ul">
    <li>provides adapter interface for customized authentication mechanisms</li>
    <li>automatic identity storage is abstracted for easy customization</li>
    <li>simple and extensible API</li>
</ul>

<h3><a name="ZendCache"></a><a href="/manual/en/zend.cache.html">Zend_Cache</a></h3>

<p>
    Zend_Cache provides a flexible approach toward caching data, including
    support for tagging, manipulating, iterating, and removing subsets.
</p>

<ul class="ul">
    <li>provides multiple storage back-ends (File, Sqlite, Memcached, etc.)</li>
    <li>provides multiple front-ends (helpers for caching function or method calls, in addition to caching full pages)</li>
    <li>simple and flexible for generic uses</li>
</ul>

<h3><a name="ZendConfig"></a><a href="/manual/en/zend.config.html">Zend_Config</a></h3>

<p>
    Zend_Config simplifies the use of configuration data for web applications.
</p>

<ul class="ul">
    <li>provides a property-based interface for reading configuration data</li>
    <li>supports a variety of hierarchical data storage formats</li>
    <li>supports inheritance of configuration data between two sections</li>
</ul>

<h3><a name="ZendConsoleGetopt"></a><a href="/manual/en/zend.console.getopt.html">Zend_Console_Getopt</a></h3>

<p>
    Command-line PHP applications benefit from this convenient object-oriented
    interface for declaring, parsing, and reporting command-line arguments and
    options.
</p>

<ul class="ul">
    <li>supports GNU getopt syntax</li>
    <li>supports more extensive option declaration syntax</li>
    <li>supports automatic reporting of option usage help</li>
</ul>

<h3><a name="ZendControllerandZendView"></a><a href="/manual/en/zend.controller.html">Zend_Controller</a> and
    <a href="/manual/en/zend.view.html">Zend_View</a></h3>

<p>
    These components provide the infrastructure for a Model-View-Controller
    (MVC) website.
</p>

<ul class="ul">
    <li>provides simple and extensible MVC pattern</li>
    <li>provides PHP-based template engine by default</li>
    <li>provides support for application modules</li>
    <li>provides configuration-less architecture</li>
</ul>

<h3><a name="ZendDate"></a><a href="/manual/en/zend.date.html">Zend_Date</a></h3>

<p>
    Zend_Date offers a detailed but simple API for manipulating dates and times.
</p>

<ul class="ul">
    <li>supports I18N and L10N throughout its API</li>
    <li>supports ISO and GNU/PHP standard tokens</li>
    <li>provides handling for dates bigger than 64bit</li>
    <li>provides sunset and sunrise calculation based on cities</li>
</ul>

<h3><a name="ZendDb"></a><a href="/manual/en/zend.db.html">Zend_Db</a></h3>

<p>
    This is a lightweight database access layer, providing an interface to PDO
    and other database extensions in PHP.  It includes adapters for each database
    driver, a query profiler, and an API to construct most SELECT statements.
</p>

<ul class="ul">
    <li>provides abstract interface to multiple PHP database extensions</li>
    <li>based on PDO interface, but extends beyond that</li>
    <li>provides query profiler</li>
    <li>provides query builder</li>
    <li>provides robust SQL support including parameters and quoting</li>
</ul>

<h3><a name="ZendDbTable"></a><a href="manual/en/zend.db.table.html">Zend_Db_Table</a></h3>

<p>
    The Zend_Db_Table component is a lightweight solution for object-oriented
    programming with databases.  
</p>

<ul class="ul">
    <li>
        implements the <a href="http://www.martinfowler.com/eaaCatalog/tableDataGateway.html" target="_blank">Table
        Data Gateway</a> and <a href="http://www.martinfowler.com/eaaCatalog/rowDataGateway.html" target="_blank">Row
        Data Gateway patterns</a>
    </li>
    <li>discovers database metadata without the need for complex configuration files to maintain</li>
    <li>provides a solution for querying related tables</li>
</ul>

<h3><a name="ZendFeed"></a><a href="/manual/en/zend.feed.html">Zend_Feed</a></h3>

<p>
    This component provides a very simple way to work with live syndicated feeds.
</p>

<ul class="ul">
    <li>consumes RSS and Atom feeds</li>
    <li>provides utilities for discovering feed links</li>
    <li>imports feeds from multiple sources</li>
    <li>provides feed building and posting operations</li>
</ul>

<h3><a name="ZendFilterandZendValidate"></a><a href="/manual/en/zend.filter.html">Zend_Filter</a> and
    <a href="/manual/en/zend.validate.html">Zend_Validate</a></h3>

<p>
    These components encourage the development of secure websites by providing
    the basic tools necessary for input filtering and validation.
</p>

<ul class="ul">
    <li>provide an extensible architecture for filters and validators</li>
    <li>support Unicode text data</li>
    <li>support user-configurable messages for validation failures</li>
</ul>

<h3><a name="ZendFilterInput"></a><a href="/manual/en/zend.filter.input.html">Zend_Filter_Input</a></h3>

<p>
    This is a configurable solution for declaring and enforcing filtering and
    validation rules. This component serves as a "cage" for input data, so they are
    available to your application only after being validated.
</p>

<ul class="ul">
    <li>does not require configuration files</li>
    <li>supports declarative syntax for applying rules to collections of input data</li>
    <li>supports chaining of filters and validators</li>
    <li>supports automatic escaping of validated data values</li>
</ul>

<h3><a name="ZendForm"></a><a href="/manual/en/zend.form.html">Zend_Form</a></h3>

<p>
    This component provides an object-oriented interface for building forms,
    complete with input filtering and rendering capabilities.
</p>

<ul class="ul">
    <li>provides classes for elements, forms, display groups, and sub forms</li>
    <li>supports per-element input filters</li>
    <li>supports per-element validations, including context-sensitive validations</li>
    <li>supports per-element, group, and form rendering via flexible decorators</li>
    <li>extensive plugin system for customizing all aspects of forms and elements</li>
</ul>

<h3><a name="ZendGdata"></a><a href="/manual/en/zend.gdata.html">Zend_Gdata (Zend Google Data Client)</a></h3>

<p>
    The Google Data APIs provide read/write access to such services hosted at
    google.com as Spreadsheets, Calendar, Blogger, and CodeSearch.
</p>

<ul class="ul">
    <li>supports both authentication mechanisms of Google Data servers</li>
    <li>supports queries and posting changes against Google Data services</li>
    <li>supports service-specific element types in an object-oriented interface</li>
    <li>matches functionality and design of other Google Data API clients</li>
</ul>

<h3><a name="ZendHttpClient"></a><a href="/manual/en/zend.http.html">Zend_Http_Client</a></h3>

<p>
    This component provides a client for the HTTP protocol, without requiring
    any PHP extensions. It drives our web services components.
</p>

<ul class="ul">
    <li>supports URL validation</li>
    <li>supports cookies</li>
    <li>supports proxy servers</li>
</ul>

<h3><a name="ZendJson"></a><a href="/manual/en/zend.json.html">Zend_Json</a></h3>

<p>
    Easily convert PHP structures into JSON and vice-versa for use in
    AJAX-enabled applications.
</p>

<ul class="ul">
    <li>uses PHP's ext/json when available</li>
    <li>supports decoding Javascript objects to native PHP structures</li>
    <li>supports encoding native PHP objects to JSON notation</li>
    <li>supports XML to JSON conversions</li>
</ul>

<h3><a name="ZendLayout"></a><a href="/manual/en/zend.layout.html">Zend_Layout</a></h3>

<p>
    Easily provide sitewide layouts for your MVC applications.
</p>

<ul class="ul">
    <li>supports use with or without MVC layer</li>
    <li>decorates Zend_View, inheriting capabilities of that component</li>
    <li>provides a variety of helpers and plugins for accessing the layout
        object from within other MVC components</li>
</ul>

<h3><a name="ZendLoader"></a><a href="/manual/en/zend.loader.html">Zend_Loader</a></h3>

<p>
    Load files, classes, and resources dynamically in your PHP application.
</p>

<ul class="ul">
    <li>supports SPL autoloader</li>
    <li>supports include_path</li>
    <li>provides exception-based failure mechanism</li>
    <li>provides mechanism for loading plugins based on class prefix and path</li>
</ul>

<h3><a name="ZendLocale"></a><a href="/manual/en/zend.locale.html">Zend_Locale</a></h3>

<p>
    Zend_Locale is the Framework's answer to the question, "How can the same
    application be used around the whole world?" This component is the foundation
    of Zend_Date, Zend_Translate, and others.
</p>

<ul class="ul">
    <li>provides access to CLDR, an international data repository for I18N issues, for all framework classes</li>
    <li>provides localizing of numbers</li>
    <li>provides normalizing of dates, times and numbers</li>
</ul>

<h3><a name="ZendLog"></a><a href="/manual/en/zend.log.html">Zend_Log</a></h3>

<p>
    Log data to the console, flat files, or a database. Its no-frills, simple,
    procedural API reduces the hassle of logging to one line of code and is perfect
    for cron jobs and error logs.
</p>

<ul class="ul">
    <li>provides a simple object-oriented interface inspired by log4j</li>
    <li>supports extensible output channels</li>
    <li>supports extensible output formats</li>
</ul>

<h3><a name="ZendMailandZendMime"></a><a href="/manual/en/zend.mail.html">Zend_Mail</a> and
    <a href="/manual/en/zend.mime.html">Zend_Mime</a></h3>

<p>
    Almost every Internet application needs to send email. Zend_Mail, assisted
    by Zend_Mime, creates email messages and sends them.
</p>

<ul class="ul">
    <li>supports attachments</li>
    <li>supports MIME types</li>
    <li>supports a variety of mail storage protocols</li>
    <li>supports multiple mail transport agents</li>
    <li>supports a variety of authentication mechanisms</li>
</ul>

<h3><a name="ZendMeasure"></a><a href="/manual/en/zend.measure.html">Zend_Measure</a></h3>

<p>
    Using Zend_Measure, you can convert measurements into different units of
    the same type. They can be added, subtracted, and compared against each other.
</p>

<ul class="ul">
    <li>supports localized handling of measurements and numbers</li>
    <li>supports converting of measurements and numbers</li>
</ul>

<h3><a name="ZendMemory"></a><a href="/manual/en/zend.memory.html">Zend_Memory</a></h3>

<p>
    Zend_Memory offers an API for managing data in a limited memory mode. A PHP
    developer can create a Zend_Memory object to store and access large amounts of
    data, which would exceed the memory usage limits imposed by some PHP
    environments.
</p>

<ul class="ul">
    <li>provide transparent mechanism to work with swappable memory blocks</li>
    <li>
        support all existing Zend_Cache back-ends as storage providers as well as the 'None' back-end which gives an
        ability to work in non-limited memory mode through the same API and with minimal overhead
    </li>
</ul>

<h3><a name="ZendPdf"></a><a href="/manual/en/zend.pdf.html">Zend_Pdf</a></h3>

<p>
    Portable Document Format (PDF) from Adobe is the de facto standard for
    cross-platform rich documents. Now, PHP applications can create or read PDF
    documents on the fly, without the need to call utilities from the shell, depend
    on PHP extensions, or pay licensing fees. Zend_Pdf can even modify existing PDF
    documents.
</p>

<ul class="ul">
    <li>supports Adobe PDF file format</li>
    <li>parses PDF structure and provides access to elements</li>
    <li>creates or modifies PDF documents</li>
    <li>utilizes memory efficiently</li>
</ul>

<h3><a name="ZendRegistry"></a><a href="/manual/en/zend.registry.html">Zend_Registry</a></h3>

<p>
    The registry is a container for storing objects and values in the
    application space. By storing an object or value in the registry, the same
    object or value is always available throughout your application for the
    lifetime of the request. This mechanism is often an acceptable alternative to
    using global variables.
</p>

<ul class="ul">
    <li>provides globally accessible storage for objects and values</li>
    <li>provides iterator, array, and indexed access</li>
</ul>

<h3><a name="ZendRestClientandZendRestServer"></a><a href="/manual/en/zend.rest.html">Zend_Rest_Client and
    Zend_Rest_Server</a></h3>

<p>
    REST Web Services use service-specific XML formats. These ad-hoc standards
    mean that the manner for accessing a REST web service is different for each
    service. REST web services typically use URL parameters (GET data) or path
    information for requesting data and POST data for sending data.
</p>

<ul class="ul">
    <li>provides capabilities to access REST web services</li>
    <li>provides capabilities to expose APIs as REST services </li>
</ul>

<h3><a name="ZendSearchLucene"></a><a href="/manual/en/zend.search.lucene.html">Zend_Search_Lucene</a></h3>

<p>
    The Apache Lucene engine is a powerful, feature-rich Java search engine
    that is flexible about document storage and supports many complex query types.
    Zend_Search_Lucene is a port of this engine written entirely in PHP 5.
</p>

<ul class="ul">
    <li>
        allows PHP-powered websites to leverage powerful search capabilities without the need for web services or Java
    </li>
    <li>provides binary compatibility with Apache Lucene</li>
    <li>matches Apache Lucene in performance</li>
</ul>

<h3><a name="ZendService"></a><a href="/manual/en/zend.service.html">Zend_Service: Akismet, Amazon, Audioscrobbler,
    Delicious, Flickr, Nirvanix, Simpy, StrikeIron and Yahoo!</a></h3>

<p>
    Web services are important to the PHP developer creating the next
    generation of mashups and composite applications. Zend Framework provides
    wrappers for service APIs from major providers to make it as simple as possible
    to use those web services from your PHP application.
</p>

<ul class="ul">
    <li>fetch web service data from popular providers with just a few lines of code</li>
    <li>simplified object-oriented API encapsulates the underlying protocols and formats</li>
    <li>features an ever-growing set of components to accommodate new and relevant services</li>
</ul>

<h3><a name="ZendSession"></a><a href="/manual/en/zend.session.html">Zend_Session</a></h3>

<p>
    Zend_Session helps manage and preserve session data across multiple page
    requests by the same client.
</p>

<ul class="ul">
    <li>provides an object-oriented interface to access session data</li>
    <li>provides optional security features to help protect against session hijacking</li>
    <li>supports namespaced access to the PHP session for interoperability</li>
</ul>

<h3><a name="ZendTranslate"></a><a href="/manual/en/zend.translate.html">Zend_Translate</a></h3>

<p>
    The Zend_Translate component provides Zend Framework with message
    translation functionality.
</p>

<ul class="ul">
    <li>provides a simple and consistent object-oriented interface to translated message storage</li>
    <li>supports industry-standard message storage formats such as gettext, TMX, Qt, XLIFF and others</li>
    <li>provides thread-safe gettext implementation</li>
</ul>

<h3><a name="ZendUri"></a><a href="/manual/en/zend.uri.html">Zend_Uri</a></h3>

<p>
    Zend_Uri is a component that aids in manipulating and validating Uniform
    Resource Identifiers (URIs). Zend_Uri exists primarily to service other
    components such as Zend_Http_Client but is also useful as a standalone utility.
</p>

<ul class="ul">
    <li>create URIs</li>
    <li>manipulate URIs</li>
    <li>validate URIs</li>
</ul>

<h3><a name="ZendXmlRpc"></a><a href="/manual/en/zend.xmlrpc.html">Zend_XmlRpc</a></h3>

<p>
    Zend_XmlRpc makes it easy to communicate with and create XML-RPC services
    from PHP.
</p>

<ul class="ul">
    <li>mimics PHP's SOAP extension</li>
    <li>flexible request and response implementation allows for use with
        non-HTTP services</li>
    <li>server implementation allows attaching existing classes to quickly
        expose APIs as XML-RPC services</li>
</ul>


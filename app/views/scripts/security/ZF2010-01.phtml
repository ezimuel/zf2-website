<h2>ZF2010-01: Potential XSS vectors due to inconsistent encodings</h2>

<h3>Executive Summary</h3>

<p>
    A number of classes, primarily within the <code>Zend_Form</code>, 
    <code>Zend_Filter</code>, <code>Zend_Form</code>, <code>Zend_Log</code> 
    and <code>Zend_View</code> components, contained character encoding 
    inconsistencies whereby calls to the <code>htmlspecialchars()</code> and
    <code>htmlentities()</code> functions used undefined or hard coded 
    charset parameters. In many of these cases developers were unable to set a
    character encoding of their choice. These inconsistencies could, in
    specific circumstances, allow certain multibyte representations of
    special HTML characters pass through unescaped leaving applications
    potentially vulnerable to cross-site scripting (XSS) exploits. Such
    exploits would only be possible if a developer used a non-typical
    character encoding (such as UTF-7), allowed users to define the
    character encoding, or served HTML documents without a valid character
    set defined. 
</p>

<h3>Action Taken</h3>

<p>
    The afore-mentioned classes have been reworked to use a default character
    encoding of UTF-8 and now expose methods to allow developers set a
    custom character encoding.
</p>

<p>
    In addition, a decision was made to default to UTF-8 for the internal
    encoding mechanisms used by <code>Zend_View</code>. If you were relying 
    on <code>Zend_View</code> using ISO-8859-1 encoding previously, you may 
    need to specify that encoding manually now. You may do so in several 
    ways:
</p>

<ul class="ul">
    <li>If manually instantiating <code>Zend_View</code>:<pre><code>
$view = new Zend_View(array('encoding' =&gt; 'ISO-8859-1'));
// or:
$view-&gt;setEncoding('ISO-8859-1');
    </code></pre></li>

    <li>From your <code>application.ini</code>:<pre><code>
resources.view.encoding = "ISO-8859-1"
    </code></pre></li>
</ul>

<h3>Recommendations</h3>

<p>
    First, we recommend using UTF-8 or ensuring your chosen character
    encoding is used consistently across all components to help prevent
    potential multibyte based XSS attacks against your application. We also
    recommend that developers ensure HTML documents are served with a valid
    character set defined, such as via the Content-Type header or inside the
    document itself.
</p>

<p>
    Second, if you are using any of the <code>Zend_Form</code>, 
    <code>Zend_Filter</code>, <code>Zend_Form</code>, <code>Zend_Log</code> or 
    <code>Zend_View</code> components, we strongly recommend upgrading to Zend 
    Framework 1.9.7 or above; regardless, it is always best to run the most 
    current version of the framework. 
</p>

<h2>Other Information</h2>
<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for working with us to help 
    protect its users:
</p>

<ul class="ul">
    <li>PÃ¡draic Brady, who made the initial report and who worked with our 
    team to ensure that the appropriate actions were taken</li>
</ul>

<?php echo $this->partial('security/policy');

<h2>ZF2009-01: LFI vector in Zend_View::setScriptPath() and render()</h2>

<h3>Executive Summary</h3>

<p>
    <code>Zend_View</code> is a component that utilizes PHP as a templating
    language. To utilize it, you specify "script paths" that contain view
    scripts, and then <code>render()</code> view scripts by specifying
    subdirectories within those script paths; the output is then returned as a
    string value which may be cached or directly output.
</p>

<p>
    <code>Zend_View::setScriptPath()</code> in versions up to and including
    1.7.4 include a potential Local File Inclusion vulnerability. If untrusted
    input is used to specify the script path and/or view script itself, a
    malicious attacker could potentially specify a system directory and thus
    render a system file.
</p>

<p>
    As an example, if the user-supplied string "/etc/passwd" or a relative path
    that resolved to that file, was supplied to
    <code>Zend_View::render()</code>, that file would be rendered.
</p>

<h3>Action Taken</h3>

<p>
    The functionality was patched starting in Zend Framework 1.7.5. From that
    release forward, the <code>render()</code> method checks for absolute paths
    and/or parent directory traversal in the file location passed, and throws an
    exception when detected.
</p>

<p>
    However, to provide backwards compatibility for those who relied on the
    functionality, an additional flag was added which can be used to optionally
    disable the protection: the method <code>setLfiProtection(false)</code>, or
    the constructor option "lfiProtection".
</p>

<h3>Recommendations</h3>

<p>
    If you were passing user input directly to <code>render()</code>, you should
    immediately upgrade to Zend Framework 1.7.5 or above; regardless, it is
    always best to run the most current version of the framework.
</p>

<p>
    Additionally, the Zend Framework team reminds developers never to trust 
    user input; in particular, when using it to determine file system paths, 
    appropriate filters and normalization should be performed to limit the 
    directory trees in which a requested file may be located.
</p>


<h2>Other Information</h2>
<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for working with us to help 
    protect its users:
</p>

<ul class="ul">
    <li>Grzegorz Nowicki, who made the initial report</li>
</ul>

<?php echo $this->partial('security/policy');

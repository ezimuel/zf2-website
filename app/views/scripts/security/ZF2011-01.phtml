<h2>ZF2011-01: Potential XSS in Development Environment Error View Script</h2>

<h3>Executive Summary</h3>

<p>
    The default error handling view script generated using 
    <code>Zend_Tool</code> failed to escape request parameters when run in the 
    "development" configuration environment, providing a potential XSS attack 
    vector.
</p>

<h3>Action Taken</h3>

<p>
    <code>Zend_Tool_Project_Context_Zf_ViewScriptFile</code> was patched such 
    that the view script template now calls the <code>escape()</code> method
    on dumped request variables.
</p>

<h3>Recommendations</h3>

<p>
    This particular vulnerability affects only those users who (a) are using 
    <code>Zend_Tool</code> (aka the <code>zf</code> CLI) to generate their 
    <code>ErrorController</code> and view script, and (b) are running that 
    code under the "development" configuration environment on a public-facing 
    web server.
</p>

<p>
    If you are running in any environment other than "development", the issue
    will not present.
</p>

<p>
    There are three approaches you can take:
</p>

<dl>
    <dt>Make sure you set the correct application environment.</dt>
    <dd>
        <p>
            You should only ever run in the "development" environment when 
            developing the application, and typically only behind a firewall. 
            Additionally, you should set your <code>APPLICATION_ENV</code> 
            environment variable via your web server's virtual host 
            configuration whenever possible. For public-facing hosts, set the
            value to anything other than "development".
        </p>

        <p>
            If you <em>must</em> run under the "development" application
            environment on a publically accessible server, follow one of the
            next two recommendations.
        </p>
    </dd>

    <dt>Upgrade to Zend Framework 1.11.4</dt>
    <dd>
        <p>
            Zend Framework 1.11.4 includes a patch that adds escaping to the 
            generated <code>error/error.phtml</code> view script, ensuring that
            request variables are escaped appropriately for the browser.
        </p>
        
        <p>
            Do note, however, that this will not update any previously generated
            code. You will still need to follow the next advice for previously
            generated error view scripts.
        </p>
    </dd>

    <dt>Modify your error/error.phtml view script</dt>
    <dd>
        <p>
            If you cannot upgrade, or if you want to patch previously generated
            error view scripts, do the following:
        </p>
        
        <ul class="ul">
            <li>Open the <code>application/views/scripts/error/error.phtml</li>
                file from your ZF-generated project in a text editor or your 
                IDE.</li>

            <li>Find the heading "Request Parameters".</li>

            <li>In the line following, you'll see the following statement:
<pre>
&lt;pre&gt;&lt;?php echo var_export($this-&gt;request-&gt;getParams(), true) ?&gt;
</pre>
            </li>

            <li>Edit the above statement to wrap the <code>var_export</code> 
                call within a <code>$this-&gt;escape()</code> method call:
<pre>
&lt;pre&gt;&lt;?php echo $this-&gt;escape(var_export($this-&gt;request-&gt;getParams(), true)) ?&gt;
</pre>
        </ul>

        <p>
            Once complete, save the file.
        </p>
    </dd>
</dl>

<h2>Other Information</h2>
<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for working with us to help 
    protect its users:
</p>

<ul class="ul">
    <li>Robert Lehmann</li>
    <li>Frederik Braun</li>
    <li>Hubert Hesse</li>
</ul>

<?php echo $this->partial('security/policy');


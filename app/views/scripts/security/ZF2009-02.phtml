<h2>ZF2009-02: XSS vector in Zend_Filter_StripTags</h2>

<h3>Executive Summary</h3>

<p>
    <code>Zend_Filter_StripTags</code> is a filtering class analogous to PHP's
    <code>strip_tags()</code> function. In addition to stripping HTML tags and
    selectively keeping those provided in a whitelist, it also provides the
    ability to whitelist specific attributes to retain per whitelisted tag.
</p>

<p>
    The reporter discovered that attributes that contained whitespace, and in
    paricular, line breaks, surrounding the attribute assignment operator would
    not be stripped, regardless of whether or not they were whitelisted. As
    examples of input affected:
</p>

<pre><code>
&lt;!-- newlines before and/or after assignment: --&gt;
&lt;a href="http://framework.zend.com/issues" onclick
=
"alert('Broken'); return false;"&gt;Issues&lt;/a&gt;
</code></pre>

<p>
    When passed to the following code:
</p>

<pre><code>
$filter = new Zend_Filter_StripTags(array('a' =&gt; array('href')));
$value  = $filter-&gt;($html);
</code></pre>

<p>
    then the "onclick" attribute would remain, even though it was not specified
    in the tag's whitelist. This could open potential cross-site scripting
    attack (XSS) vectors.
</p>

<h3>Action Taken</h3>

<p>
    The functionality was patched, and the patch released starting in Zend 
    Framework version 1.7.6.
</p>

<h3>Recommendations</h3>

<p>
    If you were using <code>Zend_Filter_StripTags</code> and utlizing the
    attribute whitelisting functionality, you should immediately upgrade to
    Zend Framework 1.7.6 or above; regardless, it is always best to run the most
    current version of the framework.
</p>

<p>
    Also, if relying on <code>Zend_Filter_StripTags</code> to prevent XSS, the
    only way to reliably do so is to strip all tags, and never to whitelist. If
    you are whitelisting, you should consider finding a reliable XSS filter
    through which to run your output; we recommend 
    <a href="http://htmlpurifier.org/">HTML Purifier</a>.
</p>

<h2>Other Information</h2>
<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for working with us to help 
    protect its users:
</p>

<ul class="ul">
    <li>Aleksey Rechinskiy, who made the initial report and provided a number 
    of code samples that reproduced the issue</li>
</ul>

<?php echo $this->partial('security/policy') ?>

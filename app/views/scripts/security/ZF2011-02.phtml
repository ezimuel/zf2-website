<h2>ZF2011-02: Potential SQL Injection Vector When Using PDO_MySql</h2>

<h3>Executive Summary</h3>

<p>
    Developers using non-ASCII-compatible encodings in conjunction with the 
    MySQL PDO driver of PHP may be vulnerable to SQL injection attacks. 
    Developers using ASCII-compatible encodings like UTF8 or latin1 are not 
    affected by this PHP issue, which is described in more detail here: 
</p>

<ul class="ul">
    <li><a href="http://bugs.php.net/bug.php?id=47802">http://bugs.php.net/bug.php?id=47802</a></li>
</ul>

<p>
    The PHP Group included a feature in PHP 5.3.6+ that allows any
    character set information to be passed as part of the DSN in PDO to
    allow both the database as well as the C-level driver to be aware of
    which charset is in use which is of special importance when PDO's
    quoting mechanisms are utilized, which Zend Framework also relies on.
</p>

<h3>Action Taken</h3>

<p>
    <code>Zend_Db</code> was patched to ensure that any charset information 
    provided to the PDO MySQL adapter will be sent to PDO both as part of the 
    DSN as well as in a SET NAMES query.  This ensures that any developer using 
    ZF on PHP 5.3.6+ while using non-ASCII compatible encodings is safe from SQL
    injection while using the PDO's quoting mechanisms or emulated prepared
    statements.
</p>

<p>
    The patch has been applied starting in versions 1.11.6 and 1.10.9 of Zend 
    Framework.
</p>

<h3>Recommendations</h3>

<p>
    If you are using non-ASCII compatible encodings, such as GBK, in conjunction 
    with PDO's MySQL adapter, we strongly urge you to consider upgrading to at 
    least PHP 5.3.6 and use Zend Framework version 1.11.6 or greater, or 1.10.9 
    if still using the 1.10 series of releases.
</p>

<h2>Other Information</h2>
<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for working with us to help 
    protect its users:
</p>

<ul class="ul">
    <li>Anthony Ferrara</li>
</ul>

<?php echo $this->partial('security/policy');



<?php echo$this->dynamicHeader('subPageMainHeader', 'Announcements'); ?>

<p class="first">Zend Framework 2.0.0dev2 Snapshot Released</p>
<div class="dotted-line"></div>

<p>
    Three months after our first milestone, we're proud to release our second 
    development snapshot of Zend Framework 2.0!
</p>

<ul class="ul">
    <li><a href="/releases/ZendFramework-2.0.0dev2.tar.gz">ZF 2.0.0dev2 TAR.GZ</a></li>
    <li><a href="/releases/ZendFramework-2.0.0dev2.zip">ZF 2.0.0dev2 ZIP</a></li>
</ul>

<p>
    This snapshot marks the completion of two milestones: 
</p>

<ul class="ul">
    <li>Autoloading and Plugin Loading</li>
    <li>Exceptions</li>
</ul>

<h2>Autoloading</h2>

<p>
    We looked at autoloading primarily from the standpoint of performance. Matthew <a href="http://weierophinney.net/matthew/archives/245-Autoloading-Benchmarks.html">published 
benchmarking results</a> from his research, and the following strategy has 
    emerged:
</p>

<ul class="ul">
    <li>We will ship class maps of the full ZF distribution, as well as 
    individual components.</li>
    <li>A classmap-based autoloader will be used as the first on the stack. Developers 
    may specify additional class maps to it via configuration.</li>
    <li>A "StandardAutoloader" that utilizes PSR-0-style path-based autoloading 
    will be used for fallback as well as development purposes.</li>
    <li>Tools are provided for generating class maps based on the code in your 
    file system.</li>
</ul>

<p>
    In future milestones, as we tackle the MVC and Zend\Application, we will 
    review how autoloaders may be instantiated and configured to ensure ease-of-use, 
    as well as portability between the different stages of development.
</p>

<h2>Plugin Loading</h2>

<p>
    In the ZF 1 series we have mostly standardized on usage of 
    <code>Zend_Loader_PluginLoader</code> for purposes of "plugin loading". 
    However, all this class actually does is resolve plugin "names" to the 
    actual classes. As such, it is up to each consuming class to determine how
    to actually instantiate classes, as well as how and when to register them
    for later retrieval. Almost every single component does this differently -- 
    leading to inconsistency in usage, and confusion for those learning the 
    framework. Additionally, the PluginLoader's usage is somewhat difficult to
    grasp at first, as well as unpredictable in some situations (e.g., view
    helper precendence when using the ActionStack). On top of all this, many
    components either don't allow registering plugins explicitly, or, when they
    do, do so inconsistently between components.
</p>

<p>
    A second concern has to do with performance. Because plugin class 
    resolution requires scanning the filesystem, it tends to be I/O heavy,
    leading to performance issues.
</p>

<p>
    The solutions to these problems are varied.
</p>

<p>
    We will be using a similar approach to plugin class resolution as we used
    for autoloading. Instead of doing a path-stack-based solution, we will 
    prefer usage of class or alias maps, which map a plugin short name to a 
    specific class. This has several benefits. First, it's easier to determine
    in your code where a map has been altered. Second, the explicit nature of 
    it makes it easy to determine where the plugin classes are when debugging.
    Third, it substantially reduces the call graph (from 19 to 7 calls!), which
    leads to incredibly performance gains.
</p>

<p>
    Class resolution is only one part of plugin loading, however. The next 
    aspect is the actual instantiation and registry of classes. For this, we 
    created first a "Broker" interface, which defines methods for accessing a
    class resolver, loading and registering plugins, testing for loaded
    plugins, and validating loaded plugins against specific criteria. A generic 
    implementation, "PluginBroker", has been created that provides the basic 
    functionality. Once a plugin has been instantiated once, the same instance
    will be returned for all subsequent calls.
</p>

<p>
    A second interface, "LazyLoadingBroker," has also been created. This is for 
    cases where components may want to configure a set of plugins that will be
    retrieved (and potentially iterated) later. A generic implementation, 
    "PluginSpecBroker", has also been provided.
</p>

<p>
    Each component that utilizes plugins -- be they adapters, helpers, 
    application resources, etc. -- now provides two separate classes:
</p>

<ul class="ul">
    <li>A ClassMapLoader extension defining the map of default plugins to 
    utilize with the component's PluginBroker implementation.</li>

    <li>A PluginBroker extension with the appropriate validators and any other 
    logic specific to the plugins being specified, and a reference to the 
    ClassMapLoader to utilize by default.</li>
</ul>

<p>
    Maps may be merged or overwritten in the plugin class loader, and you may 
    also specify alternate plugin class resolvers as desired. Additionally, the
    plugin class resolvers allow for statically providing overrides for the 
    defaults -- while any map passed to the constructor or manually configured
    will always "win".
</p>

<p>
    This solution provides important consistency for the framework, while 
    simultaneously performing faster and being easier to learn and use.
</p>

<h2>Exceptions</h2>

<p>
    The Exceptions milestone focussed on refactoring exceptions throughout the 
    framework, with the following goals:
</p>

<ul class="ul">
    <li>Each component has its own Exception marker interface</li>
    <li>Each component defines one or more exception classes extending SPL 
    exceptions and implemeting the marker interface.</li>
    <li>Exceptions are placed under an "Exception" subnamespace of the component.</li>
</ul>

<p>
    This strategy allows catching on a variety of criteria:
</p>

<ul class="ul">
    <li>Most specific: the individual exception classes.</li>
    <li>Component-level exceptions (via the component-level Exception marker interface)</li>
    <li>Generic SPL exception types</li>
    <li>Most generic: the global "Exception" type</li>
</ul>

<p>
    As part of this refactoring, unit tests that utilized try/catch blocks to 
    test exceptions have also been converted to use PHPUnit's 
    "expectedException" functionality, greatly simplifying the testing strategy 
    and making it simpler to read and less verbose in terms of lines used.
</p>

<h2>Future Iterations</h2>

<p>
    We still have several milestones to go. At this time, we will be turning 
    our attention to the "MVC" milestone, which will include analyzing our 
    current MVC structure, as well as related components such as Zend\View, 
    Zend\Layout, Zend\Navigator, and Zend\Form. Our hope is to solidify the APIs
    on these so that early adopters may begin building applications with them, 
    and help us ensure these critical components are solid before we get to a 
    beta release.
</p>

<p>
    We'd like to thank the dozens of contributors who have helped out already on
    ZF2, and look forward to announcing our next development snapshot!
</p>
